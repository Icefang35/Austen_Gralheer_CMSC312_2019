312 Project //TODO

At least 4 program file templates - done
 - use text files
 - decide the process types (arbitrary) : Text Editor, Video Processor, Internet Browser, Video Game Runner, Debugger
    - focus on each different process area (one focusing on I/O, one focusing on calculate, etc.)
 - put calculate / I/O proportions into the templates
 - put memory requirements
 **All are arbitrary, but should make sense**

----------

make PCB class - Done
 - process state
 - Pid, program counter, priority, job type
 - record instructions
 - ToString method

make a process class - Done
 - contains PCB (accessor methods)
 - ToString method

make process generator class - Done
 - randomly select job type
 - randomly select instruction count (lines in the process)
    - randomly select a number of required cycles

---------

make scheduler class
 - define scheduling algorithims
 - organizes processes
 - based on methods learned in class
 - contains process lists

----------

dispatch class?
 - changes the status of each process in real time

build Main class

----------

Add critical sections to your instruction sets - DONE
 - either as a new instruction or tagged onto an existing one

Add semaphore / mutex lock / monitor to your code when "procesing" a critical section
 - what happens if a "running" critical section is trying to be interupted?

----------

Add memory requirements to processes
 - random generated scalar
 - scaled with process type
 - num pages in RAM required to run

Implement frames
 - either as subclass or independent class
 - size
 - physical address
 - some type of content

Implement Virtual Memory
 - this is the hard disk, it stores frames not currently running
 - size expressed as a collection of frames
 - needs to be able to manage interaction of allocating and deallocating process pages to frames
 - needs method of selecting order of occupying frames

Implement Physical Memory
 - this is your RAM, it stores the processes that are currently running
 - size expressed as a collection of frames
 - needs to be able to manage interaction of allocating and deallocating process pages to frames
 - needs method of selecting order of occupying frames

Implement Page Table for processes
 - Process page table should define the frame locations in memory
 - pages are the logical addresses

Implement MMU
 - Manages physical memory and virtual memory
 - Contains memory map
 - map of all logical address spaces to physical ones

Update scheduling algorithm to respect memory requirements
 - processes only go to "ready" if there is enough free memory for them
 - processes hold resources while waiting to run
